generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  firstName    String
  lastName     String?
  workplace    String?        @default("None")
  job          String?        @default("None")
  email        String         @unique
  password     String
  role         Role?          @default(USER)
  posts        Post[]
  comments     Comment[]
  reactions    Reaction[]
  Notification Notification[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Event        Event[]
}

model Event {
  id          String   @id @default(uuid())
  title       String   @unique
  description String
  category    String
  postCount   Int      @default(0)
  thumbnail   String
  eventDate   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  adminId     String
  admin       User     @relation(fields: [adminId], references: [id])
  posts       Post[]
}

model Post {
  id        String     @id @default(uuid())
  content   String
  imageUrl  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  eventId   String
  userId    String
  event     Event      @relation(fields: [eventId], references: [id])
  user      User       @relation(fields: [userId], references: [id])
  comments  Comment[]
  reactions Reaction[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Reaction {
  id        String       @id @default(uuid())
  type      ReactionType
  createdAt DateTime     @default(now())
  postId    String
  userId    String
  post      Post         @relation(fields: [postId], references: [id])
  user      User         @relation(fields: [userId], references: [id])
}

enum ReactionType {
  UPVOTE
  DOWNVOTE
}

model Notification {
  id        String              @id @default(uuid())
  userId    String
  officerId String?
  title     String
  message   String
  type      NotificationType
  channel   NotificationChannel
  isRead    Boolean             @default(false)
  createdAt DateTime            @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id])
}

enum NotificationType {
  APPOINTMENT_CONFIRMATION
  APPOINTMENT_REMINDER
  APPOINTMENT_UPDATE
  DOCUMENT_STATUS
  SYSTEM_ALERT
}

enum NotificationChannel {
  EMAIL
  SMS
  IN_APP
}

enum Role {
  EVENT_ADMIN
  USER
}
